package com.example.yzs.controller;import cn.hutool.core.collection.CollUtil;import cn.hutool.core.io.FileUtil;import cn.hutool.core.lang.Dict;import cn.hutool.core.util.StrUtil;import com.example.yzs.constant.Result;import com.example.yzs.utils.QiniuUtils;import com.example.yzs.utils.UUIDUtils;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletResponse;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.URL;import java.net.URLEncoder;import java.util.*;@Slf4j@RestController@RequestMapping("/upload")public class UploadController {    private static final String filePath = System.getProperty("user.dir") + "/file/";    @PostMapping("/singleFile")    public Result<String> upload(@RequestParam("file") MultipartFile imgFile) {        if (imgFile.isEmpty()) {            return Result.error("上传失败，请选择文件");        }        try {            // 1.获取原始文件名            String originalFilename = imgFile.getOriginalFilename();            // 2.获取文件后缀            // int lastIndexOf = originalFilename.lastIndexOf(".");            // String suffix = originalFilename.substring(lastIndexOf - 1);            // 3.使用UUID随机产生文件名称，防止同名文件覆盖            String fileName = UUIDUtils.simpleUuid() + "-" + originalFilename;            // 4.使用七牛云上传            QiniuUtils.upload2Qiniu(imgFile.getBytes(), fileName);            // 获取图片下载链接并返回给前端            String downloadUrl = QiniuUtils.download(fileName);            return Result.success("上传成功", downloadUrl);        } catch (IOException e) {            e.printStackTrace();            return Result.error("上传失败");        }    }    @PostMapping("/multiFile")    public Result<String> upload(@RequestParam("file") List<MultipartFile> imgFiles) {        if (imgFiles == null || imgFiles.isEmpty()) {            return Result.error("上传失败，请选择文件");        }        List downloadUrls = new ArrayList<>();        for (MultipartFile imgFile : imgFiles) {            if (imgFile.isEmpty()) {                return Result.error("上传失败，请选择文件");            }            try {                // 1.获取原始文件名                String originalFilename = imgFile.getOriginalFilename();                // 2.使用UUID随机产生文件名称，防止同名文件覆盖                String fileName = UUIDUtils.simpleUuid() + "-" + originalFilename;                // 3.读取文件内容到字节数组                byte[] bytes = imgFile.getBytes();                // 4.使用七牛云上传                QiniuUtils.upload2Qiniu(bytes, fileName);                // 5.获取图片下载链接并添加到列表中                String downloadUrl = QiniuUtils.download(fileName);                downloadUrls.add(downloadUrl);            } catch (IOException e) {                e.printStackTrace();                return Result.error("上传失败");            }        }        return Result.success("上传成功", downloadUrls.toString());    }    private String getImageData(String imgUrl) throws IOException {        URL url = new URL(imgUrl);        ByteArrayOutputStream baos = new ByteArrayOutputStream();        try (InputStream is = url.openStream()) {            byte[] buffer = new byte[4096];            int n;            while ((n = is.read(buffer)) != -1) {                baos.write(buffer, 0, n);            }        }        byte[] imageBytes = baos.toByteArray();        return Base64.getEncoder().encodeToString(imageBytes);    }    @GetMapping("/{flag}")    public void avatarPath(@PathVariable String flag, HttpServletResponse response) {        System.out.println(flag);        if (!FileUtil.isDirectory(filePath)) {            FileUtil.mkdir(filePath);        }        OutputStream os;        List<String> fileNames = FileUtil.listFileNames(filePath);        String avatar = fileNames.stream().filter(name -> name.contains(flag)).findAny().orElse("");        try {            if (StrUtil.isNotEmpty(avatar)) {                response.addHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(avatar, "UTF-8"));                response.setContentType("application/octet-stream");                byte[] bytes = FileUtil.readBytes(filePath + avatar);                os = response.getOutputStream();                os.write(bytes);                os.flush();                os.close();            }        } catch (Exception e) {            System.out.println("文件下载失败");        }    }    @PostMapping("/wang/upload")    public Map<String, Object> wangUpload(@RequestParam("file") MultipartFile file) {        String flag = System.currentTimeMillis() + "";        String fileName = file.getOriginalFilename();        try {            //文件存储形式，时间戳 + 文件名            FileUtil.writeBytes(file.getBytes(), filePath + flag + "-" + fileName);            Thread.sleep(1L);        } catch (Exception e) {            System.err.println(fileName + "--文件上传失败");        }        Map<String, Object> resMap = new HashMap<>();        resMap.put("errno", 0);        resMap.put("data", CollUtil.newArrayList(Dict.create().set("url", "http://localhost:8080/api/upload/" + flag)));        return resMap;    }    @PostMapping("/wang/video")    public Map<String, Object> wangVoice(@RequestParam("voice") MultipartFile file) {        String flag = System.currentTimeMillis() + "";        String fileName = file.getOriginalFilename();        try {            //文件存储形式，时间戳 + 文件名            FileUtil.writeBytes(file.getBytes(), filePath + flag + "-" + fileName);            Thread.sleep(10L);        } catch (Exception e) {            System.err.println(fileName + "--文件上传失败");        }        Map<String, Object> resMap = new HashMap<>();        resMap.put("errno", 0);        Dict dataDict = Dict.create().set("url", "http://localhost:8080/api/upload/" + flag);        resMap.put("data", dataDict);        return resMap;    }}